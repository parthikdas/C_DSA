OUPUT BASED DEBUGGING QUESTION

int i =0;
if(i==1,2) cout<<“apple”; // here it will check for no
else cout<<“orange”;

output: apple 


int i =0;
if(i==(1,2)) cout<<“apple”; // here it will check specifically
else cout<<“orange”;

output: orange
__________________________________________________________
int i=65;
switch(i){
case 65: prift(“lol”);break;
case ‘A’: printf(“lol1”);break;
default: printf(“def”);
}
// compilation error as 65 and ‘A’ is same switch doesnot support dup
__________________________________________________________
int i=65;
switch(i){
case i: prift(“lol”);break;
case i+1: printf(“lol1”);break;
default: printf(“def”);
}
// compilation error can’t use i var in case if it was const then it was valid
__________________________________________________________
int a,b,c;
int arr[5]={1,2,3,25,7};
a=++arr[1];
b=arr[1]++;
c=arr[a++];
cout<<a<<b<<c;
// 4 3 25
__________________________________________________________
char arr[5] =“Knot”,*ptr,i,*ptr1;
ptr=&array[1];
ptr=ptr+3; // here char pointer so move 3 bytes if its int pinter then by 3*4=12 bytes
*ptr1 = 101;
print ptr;
// output is note
as k=100, n=101, o=102, t=103, \0=104 so we start to print from 101 and in 101+3=104 which is null char at end of string there we store 101 which is e so output if note
__________________________________________________________
char *str = "His";
for(int i=0;i<strlen(str);i++) printf("%s",str++);
// Hisis
1st iteration 0 - 3 (His) after that str++ i.e. 1 so it will start from 1 
2nd iteration 1 - 2(string length now) now we get is
__________________________________________________________
c program:
char str[8] ="if block";
if(str == "ifblock") printf("lol");
else printf("lol1");
// lol1
__________________________________________________________
int fun(int x){
    if(x<=0) return 1;
    return 1+fun(x-1);
}
// T(n) = 1+T(n-1)
    T(n) = 1
    So, O(n)

Remember: n+t(n-1) = O(n^2)
          1+t(n/2) = O(logn)
          n+t(n/2) = O(nlogn) user input + dealing with half of elements
          1+2t(n/2) = O(n)
          1+2t(n-1) = O(2^n)
__________________________________________________________
int fun(int n, int m, int o) { // assume n as input and m as constant
    if(n<=0) print(m,o);
    else {
        fun(n-1,m+1,o);
        fun(n-1,m,o+1);
    }
}
//O(2^n)
__________________________________________________________
int a=130;
char *ptr;
ptr = (char*)&a;
printf("%d",*ptr);
//-126
__________________________________________________________
int i=3;
int *j;
int **k;
j = &i;
k = &j;
k++;
printf("%d",**k);
// garbage value
__________________________________________________________
int i=0,j=1,k=0;
if(++k,j,i++)
    printf("%d%d%d",i,j,k);
// Prints Nothing
__________________________________________________________
int i=5,j=4;
if(!printf("")) // printf returns the length of string here its 0
    printf("%d%d",i,j);
else printf("%d%d",i++,++j);
// 5 4
__________________________________________________________
switch(*(3 + "I LOVE" "ABCD" + 3)) {
    case 'A': printf("Apple Mac");break;
    case 'B': printf("Windows");break;
    case 'C': printf("Great Linux");break;
    default: printf("All of above");
}
// Apple Mac
// 3 + that string is we will reach at 'O' then at last again +3 we will reach at 'A' 
__________________________________________________________
